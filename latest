#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <exception>
#include <chrono>
#include <thread>

// Shiritori game written by Vincent Vanmarsenille
// Opponents will have to make words starting from the seconds last letter of the previous word
// example: car, animal, alarm, road, answer, election, oil, irresponsible
// Each player has only 1 live, the person that survives the longest wins the game


class Player
{
private:
    std::string Name;
    int Playerwordcount;
    int Playerlives;
public:

    Player()   // default constructor
    {
        std::string name;
        std::cout << "Please enter your nickname" << std::endl;
        std::cin >> name;
        Name = name;
        Playerwordcount = 0;
        Playerlives = 1;
    }

    int update_playerwords(int Playerwordcount) 
    {
        
        Playerwordcount += 1;
    }

    void update_playerlives(int Playerlives)
    {
        Playerlives -= 1;
        if (Playerlives == 0)
        {
            std::cout << Name << "has been eliminated from the game, optiefen vriend!" << std::endl;
        }
        else
        {
            std::cout << Name << ", you have "<<Playerlives<<" live(s) remaining." << std::endl;
        }

    }

    void get_playerinfo()
    {
        std::cout << Name << " correctly guessed" << Playerwordcount << "words." << std::endl;
    }

    friend class Game;
};



class Game
{
private:

    int Setlives;
    int Setplayers;
    int Wordcount;
    int Setplaytime;
    std::vector<Player> Participants;
    std::vector<std::string> EnglishWords;
    


public:


    Game()         // default constructor 
    {
        Setlives = 1;
        Wordcount = 0;
        Setplayers = 2;
        Setplaytime = 20;
        EnglishWords={};
        Participants = {};
        Participants.resize(Setplayers);

    }

    void Getting_Userinput()     // overwites values set by default constructor
    {
        std::cout << "Keep default settings? (y or n)" << std::endl;
        char input;
        std::cin >> input;

        if (input == 'N' || input == 'n')
        {
            std::cout << "You can now manually change the settings, please answer with integers." << std::endl;
            std::cout << "Please enter the amount of players: " << std::endl;
            std::cin >> Setplayers;
            std::cout << "Game set up for " << Setplayers << " players." << std::endl;

            std::cout << "Please enter the amount of lives for each player: " << std::endl;
            std::cin >> Setlives;
            std::cout << "Every player will have " << Setlives << " live(s)." << std::endl;

            std::cout << "Please enter amount of time between words: " << std::endl;
            std::cin >> Setplaytime;
            std::cout << "Every player will have " << Setplaytime << " seconds." << std::endl;

            std::cout << "You can always stop the game by simply typing: stop." << std::endl;
            std::cout << "Type start to start the game!" << std::endl;

        }

        else if(Setplayers > 2)
        {
            Participants.resize(Setplayers);
        }

        else
        {   
            std::cout << "You can always stop the game by simply typing: stop." << std::endl;
            std::cout << "Type start to start the game!" << std::endl;
        }
    }

   
    void shiritori_algorithm()    
    {
        for (const auto& participant : Participants)
        {
            std::cout<<participant.Name <<" it is your turn to guess an english word."<< std::endl;
            std::cout << "You have " << Setplaytime << " seconds remaining" << std::endl;


            auto start = std::chrono::high_resolution_clock::now();
            int Time = 20;
           
            auto end = std::chrono::high_resolution_clock::now();
            Time=Time-2;
            std::cout << Time << " seconds remaining!" << std::endl;
            std::string GuessedWord;
            std::cin >> GuessedWord;
            if (checking_word(GuessedWord))
            {
                
            }
            else
            {
                if (Time == 0)
                {
                    std::cout<<participant.Name<<" you were too slow!"<< " You lost a life."<<std::endl;

                }


            }
        }
    }

    


    bool checking_word(const std::string& word)
    {
        std::ifstream EnglishWordsStream;
        EnglishWordsStream.open("EnglishDictionary.txt");
        if (EnglishWordsStream.is_open())
        {
            while (!EnglishWordsStream.eof())
            {
                std::string line;
                std::getline(EnglishWordsStream, line);
                if (line == "stop")
                {
                    std::cout << "Program will be terminated!" << std::endl;
                    std::terminate;
                }
                if (line == word)
                {
                     return true;
                }
            }

            std::cout << "This word does not occur in the English Dictionary!. You lost a life!" << std::endl;
            return false;
        }
        else
        {
            std::cout << "Could not open the required English vocabulary file!" << std::endl;
            std::cout << "Program will be terminated." << std::endl;
            std::terminate();
        }
    }
};




int main()
{  
   Game Game1{}; // calling Game default constructor
   Game1.Getting_Userinput();
   Game1.shiritori_algorithm();
   return 0;
}

