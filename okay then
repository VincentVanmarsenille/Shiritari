#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <exception>
#include <chrono>
#include <thread>
#include <algorithm>

// Shiritori game written by Vincent Vanmarsenille
// Opponents will have to make words starting from the seconds last letter of the previous word
// example: car, animal, alarm, road, answer, election, oil, irresponsible
// Each player has only 1 live, the person that survives the longest wins the game


class Player
{
private:
    std::string Name;
    int Playerwordcount;
    int Playerlives;
public:

    Player()   // default constructor
    {
        std::string name;
        std::cout << "Please enter your nickname" << std::endl;
        std::cin >> name;
        Name = name;
        Playerwordcount = 0;
        Playerlives = 1;
    }

    int update_playerwords() 
    {
        
        Playerwordcount += 1;
    }

    bool update_playerlives()
    {
        Playerlives -= 1;
        if (Playerlives <= 0)
        {
            std::cout << Name << " you have been eliminated from the game, optiefen vriend!" << std::endl;
            return false;
        }
        else
        {
            std::cout << Name << ", you have "<<Playerlives<<" live(s) remaining." << std::endl;
            return true;
        }

    }

    void get_playerinfo()
    {
        std::cout << Name << " correctly guessed" << Playerwordcount << "words." << std::endl;
    }

    friend class Game;
};



class Game 
{
private:

    int Setlives;
    int Setplayers;
    int Wordcount;
    int Setplaytime;
    std::vector<Player> Participants;
    std::vector<std::string> EnglishWords;
    


public:


    Game()         // default constructor 
    {
        Setlives = 1;
        Wordcount = 0;
        Setplayers = 2;
        Setplaytime = 20;
        EnglishWords={};
        Participants = {};
        Participants.resize(Setplayers);

    }

    void Getting_Userinput()     // overwites values set by default constructor
    {
        std::cout << "Keep default settings? (y or n)" << std::endl;
        char input;
        std::cin >> input;

        if (input == 'N' || input == 'n')
        {
            std::cout << "You can now manually change the settings, please answer with integers." << std::endl;
            std::cout << "Please enter the amount of players: " << std::endl;
            std::cin >> Setplayers;
            std::cout << "Game set up for " << Setplayers << " players." << std::endl;

            std::cout << "Please enter the amount of lives for each player: " << std::endl;
            std::cin >> Setlives;
            std::cout << "Every player will have " << Setlives << " live(s)." << std::endl;

            std::cout << "Please enter amount of time between words: " << std::endl;
            std::cin >> Setplaytime;
            std::cout << "Every player will have " << Setplaytime << " seconds." << std::endl;

            std::cout << "You can always stop the game by simply typing: stop." << std::endl;

        }

        else if(Setplayers > 2)
        {
            Participants.resize(Setplayers);
        }

        else
        {   
            std::cout << "You can always stop the game by simply typing: stop." << std::endl;
            std::cout << "Type start to start the game!" << std::endl;
        }
    }

   
    void shiritori_algorithm(Player participant)    
    {       
            std::cout<<participant.Name <<" it is your turn to guess an english word."<< std::endl;
            std::cout << "You have " << Setplaytime << " seconds remaining" <<std::endl;

            int Time = Setplaytime;
            auto start = std::chrono::high_resolution_clock::now();

            auto end = std::chrono::high_resolution_clock::now();
            std::cout << Time << " seconds remaining!" << std::endl;

            std::string GuessedWord;
            std::cin >> GuessedWord;
            if (checking_word(GuessedWord))
            {
                std::cout << "Congratulations, you survived!. (atleast for now LOL)" << std::endl;
                shiritori_algorithm(select_next_player());
                
            }
            else if (!checking_word(GuessedWord))
            {
                participant.update_playerlives();
                shiritori_algorithm(select_next_player());
            }
            
            
            else if (Time == 0)
            {
                std::cout << participant.Name << " you were too slow!" << " You lost a life." << std::endl;
                participant.update_playerlives();
                shiritori_algorithm(select_next_player());
            }
    }

    Player select_next_player()
    {
        if (!check_game_end())
        {
            for (Player& participant : Participants)
            {
                return participant;
            }
        }

        else
        {
            std::cout << Participants[0].Name << " is the winner of the game!!!" << std::endl;
            std::cout << "Game ended" << std::endl;
            std::terminate;
        }

    }

    bool check_game_end()
    {
        if (Participants.size() <= 1) { return true; }
        else { return false; }
    }

    void start()
    {
        std::cout << "Type start to start the game!" << std::endl;
        std::string presskey;
        std::cin >> presskey;
        std::transform(presskey.begin(), presskey.end(), presskey.begin(), ::toupper);

        while (presskey != "START")
        {
            std::cout << "Type start to start the game!" << std::endl;
            std::cin >> presskey;
            std::transform(presskey.begin(), presskey.end(), presskey.begin(), ::toupper);

        }
        return;
    }


    bool checking_word(const std::string& word)
    {
        std::ifstream EnglishWordsStream;
        EnglishWordsStream.open("EnglishDictionary.txt");
        if (EnglishWordsStream.is_open())
        {
            while (!EnglishWordsStream.eof())
            {
                std::string line;
                std::getline(EnglishWordsStream, line);
                if (line == "stop")
                {
                    std::cout << "Program will be terminated!" << std::endl;
                    std::terminate;
                }
                if (line == word)
                {
                     return true;
                }
            }

            std::cout << "This word does not occur in the English Dictionary!. You lost a life!" << std::endl;
            return false;
        }
        else
        {
            std::cout << "Could not open the required English vocabulary file!" << std::endl;
            std::cout << "Program will be terminated." << std::endl;
            std::terminate();
        }
    }
};



int main()
{  
   Game Game1{};        // calling Game default constructor
   Game1.Getting_Userinput();
   Game1.start();
   Game1.shiritori_algorithm(Game1.select_next_player());
   return 0;
}





